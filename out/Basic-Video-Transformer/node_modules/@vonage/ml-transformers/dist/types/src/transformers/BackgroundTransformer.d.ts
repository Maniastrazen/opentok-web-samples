/// <reference types="dom-webcodecs" />
/// <reference types="offscreencanvas" />
import { BackgroundOptions } from '../../main';
import { PostProcessInterface } from './PostProcessInterface';
export declare type ProcessFrame = (image: ImageBitmap) => (void);
declare class BackgroundTransformer {
    static SELFIE_WIDTH: number;
    static SELFIE_HIGHT: number;
    processFrameCb?: ProcessFrame;
    segmentationMaskImage_?: ImageBitmap;
    segmentationMaskCanvas_: OffscreenCanvas;
    segmentationMaskCtx_: OffscreenCanvasRenderingContext2D | null;
    segmentationResultsCanvas_: OffscreenCanvas;
    segmentationResultsCtx_: OffscreenCanvasRenderingContext2D | null;
    resultCanvas_: OffscreenCanvas;
    resultCtx_: OffscreenCanvasRenderingContext2D | null;
    postProcessInterface_?: PostProcessInterface;
    constructor();
    init(framProcessor: ProcessFrame): void;
    setBackgroundOptions(backgroundOptions: BackgroundOptions): Promise<void>;
    close(): Promise<void>;
    start(): void;
    transform(frame: any, controller: TransformStreamDefaultController): Promise<void>;
    processFrame(controller: TransformStreamDefaultController, image: ImageBitmap, timestamp: number): void;
    processSource(image: ImageBitmap): void;
    flush(): void;
    getTransformerType(): string;
    setVideoBGReadable(videoBGReadable: ReadableStream): Promise<void>;
    setVirtualBGImage(image: ImageBitmap): Promise<void>;
    setSegmentationMaskImage(image: ImageBitmap): void;
}
export default BackgroundTransformer;
