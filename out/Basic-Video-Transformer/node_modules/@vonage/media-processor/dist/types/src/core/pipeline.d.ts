/// <reference types="dom-webcodecs" />
import Emittery from 'emittery';
/**
 * WarningType specifies the type of warning from the transformer
 */
export declare enum WarningType {
    /**
     * Warning about change in process rate
     */
    FPS_DROP = "fps_drop"
}
/**
 * DropInfo gives info about the frame rate of the transformer
 */
export declare type DropInfo = {
    /**
     * The rate predicted rate of the track
     */
    requested: number;
    /**
     * The actual rate of the track
     */
    current: number;
};
/**
 * ErrorFunction specifies the function which the error (exception) happened
 */
export declare type ErrorFunction = 'start' | 'transform' | 'flush';
/**
 * EventMetaData the meta data of the event.
 */
export declare type EventMetaData = {
    /**
     * The transformer index in the array of transformers.
     */
    transformerIndex: number;
};
/**
 * WarnData the warning data type
 * ```ts
 *  {
 *    eventMetaData: { transformerIndex: 0},
 *    warningType: WarningType.FPS_DROP
 *    dropInfo: {requested: 30, current:20}
 *  }
 * ```
 */
export declare type WarnData = {
    eventMetaData: EventMetaData;
    warningType: WarningType;
    dropInfo: DropInfo;
};
/**
 * ErrorData the error data type
 * ```ts
 *  {
 *    eventMetaData: { transformerIndex: 0},
 *    ErrorData: 'start',
 *    error: e (the exception in the catch)
 *  }
 * ```
 */
export declare type ErrorData = {
    eventMetaData: EventMetaData;
    function: ErrorFunction;
    error: unknown;
};
/**
 * PipelineInfolData - life cycle information of pipeline
 */
export declare type PipelineInfoData = {
    message: 'pipeline_ended' | 'pipeline_ended_with_error' | 'pipeline_started' | 'pipeline_started_with_error' | 'pipeline_restarted' | 'pipeline_restarted_with_error';
};
/**
 * EventDataMap the options of event data
 * @warn - see `WarnData`
 * @error - see `ErrorData`
 * @pipelineInfo - see `pipelineInfo`
 */
export declare type EventDataMap = {
    warn: WarnData;
    error: ErrorData;
    pipelineInfo: PipelineInfoData;
};
declare class InternalTransformer extends Emittery<EventDataMap> implements Transformer {
    uuid_: string;
    transformerType_: string;
    fps_: number;
    framesTransformed_: number;
    transformer_: Transformer;
    shouldStop_: boolean;
    isFlashed_: boolean;
    framesFromSource_: number;
    mediaTransformerQosReportStartTimestamp_: number;
    videoHeight_: number;
    videoWidth_: number;
    trackExpectedRate_: number;
    index_: number;
    controller_?: TransformStreamDefaultController;
    constructor(transformer: Transformer, index: number);
    setTrackExpectedRate(trackExpectedRate: number): void;
    start(controller: TransformStreamDefaultController): Promise<void>;
    transform(data: VideoFrame | AudioData, controller: TransformStreamDefaultController): Promise<void>;
    flush(controller: TransformStreamDefaultController): Promise<void>;
    stop(): void;
    mediaTransformerQosReport(): void;
}
declare class Pipeline extends Emittery<EventDataMap> {
    transformers_: Array<InternalTransformer>;
    trackExpectedRate_: number;
    constructor(transformers: Array<Transformer>);
    setTrackExpectedRate(trackExpectedRate: number): void;
    start(readable: ReadableStream, writeable: WritableStream): Promise<void>;
    destroy(): Promise<void>;
}
export default Pipeline;
