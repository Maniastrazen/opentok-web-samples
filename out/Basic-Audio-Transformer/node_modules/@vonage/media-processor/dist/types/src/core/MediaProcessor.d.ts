import Pipeline, { EventDataMap } from './pipeline';
import Emittery from 'emittery';
/**
 * Media processor class holding and running the media processing logic.
 * The class implements an async event emitter pattern
 *
 * @example
 *
 * ```ts
 *   let mediaProcessor: MediaProcessor = new MediaProcessor();
 *   let transformers: Array<Transformer> = [];
 *   transformers.push(new CanvasTransform());
 *   mediaProcessor.setTransformers(transformers);
 *   mediaProcessor.on('error',(ErrorData => {}))
 *   mediaProcessor.on('warn',(WarnData => {}))
 * ```
 */
declare class MediaProcessor extends Emittery<EventDataMap> {
    /**
     * @private
     */
    uuid_: string;
    /**
     * @private
     */
    pipeline_?: Pipeline;
    /**
     * @private
     */
    transformers_?: Array<Transformer>;
    /**
     * @private
     */
    readable_?: ReadableStream;
    /**
     * @private
     */
    writable_?: WritableStream;
    /**
     * @private
     */
    trackExpectedRate_: number;
    constructor();
    /**
    * Sets the expected rate of the track per second.
    * The media processor will use this number for calculating drops in the rate.
    * This could happen when the transformation will take more time than expected.
    * This will not cause an error, just warning to the client.
    * Mostly:
    * Video: 30 frames per second
    * Audio: 50 audio data per second for OPUS
    * @param trackExpectedRate - number holds the predicted track rate.
    */
    setTrackExpectedRate(trackExpectedRate: number): void;
    /**
     * Starts running the tranformation logic performed by the media processor instance.
     *
     * @param readable Readable stream associated to the media source being processed.
     * @param writable Writable stream associated to the resulting media once processed.
     */
    transform(readable: ReadableStream, writable: WritableStream): Promise<void>;
    /**
     * @private
     */
    transformInternal(): Promise<void>;
    /**
     * Sets an array of transfromer instances that will be hold and ran by the media processor instance.
     *
     * @param transformers An array of transformer instances.
     */
    setTransformers(transformers: Array<Transformer>): Promise<void>;
    /**
     * Stops running the tranformation logic performed by the media processor instance.
     */
    destroy(): Promise<void>;
}
export default MediaProcessor;
