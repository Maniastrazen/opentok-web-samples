import { EventDataMap, MediaProcessorConnectorInterface } from "@vonage/media-processor";
import { BlurRadius, BackgroundBlurConfig, VirtualBackgroundConfig, AssetBackgroundConfig, VideoBackgroundConfig, MediaProcessorBaseConfig, SilueteBlurConfig, MediapipeConfig, MediaPipeResults, MediaPipeResultsListener, MediaPipeModelType, FaceDetectionResults, FaceDetectionOptions, FaceMeshResults, FaceMeshOptions, HandsResults, HandsOptions, HolisticResults, HolisticOptions, ObjectronResults, ObjectronOptions, PoseResults, PoseOptions, SelfieSegmentationResults, SelfieSegmentationOptions, MediaPipeModelConfig } from "./src/types";
import { isSupported } from "./src/utils/utils";
import Emittery from "emittery";
import MediapipeHelper from "./src/transformers/MediapipeHelper";
/**
 * Vonage Mediapipe objects info (it will be used by the @mediapipe/drawing_utils package which is not included by this library).
 * @param VonageSelfiesegmentation:
 * - VERSION
 * @param VonageHands:
 * - VERSION
 * - HAND_CONNECTIONS
 * @param VonageHolistic:
 * - VERSION
 * - FACE_GEOMETRY
 * - FACEMESH_LIPS
 * - FACEMESH_LEFT_EYE
 * - FACEMESH_LEFT_EYEBROW
 * - FACEMESH_LEFT_IRIS
 * - FACEMESH_RIGHT_EYE
 * - FACEMESH_RIGHT_EYEBROW
 * - FACEMESH_RIGHT_IRIS
 * - FACEMESH_FACE_OVAL
 * - FACEMESH_CONTOURS
 * - FACEMESH_TESSELATION
 * - HAND_CONNECTIONS
 * - POSE_CONNECTIONS
 * - POSE_LANDMARKS
 * - POSE_LANDMARKS_LEFT
 * - POSE_LANDMARKS_RIGHT
 * - POSE_LANDMARKS_NEUTRAL
 * @param VonageFacedetection:
 * - VERSION
 * - FACEDETECTION_LIPS
 * - FACEDETECTION_LEFT_EYE
 * - FACEDETECTION_LEFT_EYEBROW
 * - FACEDETECTION_RIGHT_EYE
 * - FACEDETECTION_RIGHT_EYEBROW
 * - FACEDETECTION_FACE_OVAL
 * - FACEDETECTION_CONTOURS
 * - FACEDETECTION_TESSELATION
 * @param VonageFacemash:
 * - VERSION
 * - FACE_GEOMETRY
 * - FACEMESH_LIPS
 * - FACEMESH_LEFT_EYE
 * - FACEMESH_LEFT_EYEBROW
 * - FACEMESH_LEFT_IRIS
 * - FACEMESH_RIGHT_EYE
 * - FACEMESH_RIGHT_EYEBROW
 * - FACEMESH_RIGHT_IRIS
 * - FACEMESH_FACE_OVAL
 * - FACEMESH_CONTOURS
 * - FACEMESH_TESSELATION
 * @param VonageObjectron:
 * - VERSION
 * - BOX_CONNECTIONS
 * - BOX_KEYPOINTS
 * @param VonagePose:
 * - VERSION
 * - POSE_CONNECTIONS
 * - POSE_LANDMARKS
 * - POSE_LANDMARKS_LEFT
 * - POSE_LANDMARKS_RIGHT
 * - POSE_LANDMARKS_NEUTRAL
 */
import VonageSelfiesegmentation from "./src/transformers/SelfieSegmentationHelper";
import VonageHands from "./src/transformers/HandsHelper";
import VonageHolistic from "./src/transformers/HolisticHelper";
import VonageFacedetection from "./src/transformers/FaceDetectionHelper";
import VonageFacemash from "./src/transformers/FaceMashHelper";
import VonageObjectron from "./src/transformers/ObjectronHelper";
import VonagePose from "./src/transformers/PoseHelper";
import { VonageMediaProcessor } from "./src/vonage/VonageMediaProcessor";
/**
 * BackgroundOptions background options
 */
declare type BackgroundOptions = BackgroundBlurConfig | ((VirtualBackgroundConfig | VideoBackgroundConfig) & AssetBackgroundConfig) | SilueteBlurConfig;
/**
 * MediaProcessorConfig specifies the transformer logic to be performed.
 *
 * @example
 *
 * ```ts
 *   let config: MediaProcessorConfig;
 *   if(typeType === 'blur'){
 *     config = {
 *       mediapipeBaseAssetsUri: 'https://example.com', // mediapipeBaseAssetsUri is optional we provide static assets for it
 *       transformerType: 'BackgroundBlur',
 *       radius: blurLevelType === 'low' ? BlurRadius.Low : BlurRadius.High,
 *     };
 *   } else if(typeType === 'virtual'){
 *     config = {
 *       mediapipeBaseAssetsUri: 'https://example.com', // mediapipeBaseAssetsUri is optional we provide static assets for it
 *       transformerType: 'VirtualBackground',
 *       backgroundAssetUri: location.href + "images/vonage.jpeg"
 *     }
 *   } else if(typeType === 'video') {
 *     config = {
 *       mediapipeBaseAssetsUri: 'https://example.com', // mediapipeBaseAssetsUri is optional we provide static assets for it
 *       transformerType: 'VideoBackground',
 *       backgroundAssetUri: location.href + 'videos/bbb.mp4'
 *     };
 *   } else if(typeType === 'siluete') {
 *     config = {
 *       mediapipeBaseAssetsUri: 'https://example.com', // mediapipeBaseAssetsUri is optional we provide static assets for it
 *       transformerType: 'SilueteBlur',
 *       radius: blurLevelType === 'low' ? BlurRadius.Low : BlurRadius.High,
 *     };
 *   }
 * ```
 */
declare type MediaProcessorConfig = MediaProcessorBaseConfig & BackgroundOptions;
export declare function createVonageMediaProcessor(config: MediaProcessorConfig): Promise<VonageMediaProcessor>;
/**
 * Registers for error and warn events that come from the library on run time.
 * see @EventDataMap for more info.
 * @deprecated Use the function {@link createMediaProcessor} to instantiate a processor directly.
 */
declare function getVonageEventEmitter(): Emittery<EventDataMap>;
/**
 * Sets the expected rate of the track per second.
 * The media processor will use this number for calculating drops in the rate.
 * This could happen when the transformation will take more time than expected.
 * This will not cause an error, just warning to the client.
 * Mostly:
 * Video: 30 frames per second
 * Audio: 50 audio data per second for OPUS
 * @deprecated Use the function {@link createMediaProcessor} to instantiate a processor directly.
 * @param trackExpectedRate - number holds the predicted track rate. -1 for disable this monitor.
 */
declare function setTrackExpectedRate(trackExpectedRate: number): void;
/**
 * builder function to create MediaProcessorConnectorInterface
 * This function hides all the functionality of the @vonage/media-processor library.
 * using this create function promises the user the best performance of background operations.
 * @deprecated Use the function {@link createMediaProcessor} to instantiate a processor directly.
 * @param config - see `MediaProcessorConfig` definition
 * @returns - `MediaProcessorConnectorInterface` feed this return value to any vonage SDK that supports this API
 */
declare function createVonageMediaProcessorConnector(config: MediaProcessorConfig): Promise<MediaProcessorConnectorInterface>;
/**
 * change the background option during run time using this function.
 * while using this function the media-processor will not be destroyed.
 * while using this function the library promise a full resource cleanup.
 * @deprecated Use the function {@link createMediaProcessor} to instantiate a processor directly.
 * @param backgroundOptions - see `BackgroundOptions` definition
 * @returns - Promise<void>
 */
declare function setBackgroundOptions(backgroundOptions: BackgroundOptions): Promise<void>;
export type { MediaProcessorBaseConfig, BackgroundBlurConfig, VirtualBackgroundConfig, VideoBackgroundConfig, AssetBackgroundConfig, SilueteBlurConfig, MediaProcessorConfig, BackgroundOptions, MediapipeConfig, MediaPipeResults, MediaPipeModelType, MediaPipeResultsListener, FaceDetectionResults, FaceDetectionOptions, FaceMeshResults, FaceMeshOptions, HandsResults, HandsOptions, HolisticResults, HolisticOptions, ObjectronResults, ObjectronOptions, SelfieSegmentationOptions, SelfieSegmentationResults, PoseResults, PoseOptions, MediaPipeModelConfig, };
export { VonageMediaProcessor, BlurRadius, createVonageMediaProcessorConnector, getVonageEventEmitter, setTrackExpectedRate, isSupported, MediapipeHelper, setBackgroundOptions, VonageSelfiesegmentation, VonageFacedetection, VonageFacemash, VonageHands, VonageHolistic, VonageObjectron, VonagePose, };
