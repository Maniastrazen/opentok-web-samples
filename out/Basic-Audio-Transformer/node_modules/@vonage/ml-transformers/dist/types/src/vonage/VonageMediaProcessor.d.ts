import { EventDataMap, MediaProcessorConnector } from "@vonage/media-processor";
import Emittery from "emittery";
import { BackgroundOptions, MediaProcessorConfig } from "../../main";
/**
 * Class wrapping features provided by ml-transformers.
 */
export declare class VonageMediaProcessor extends Emittery<EventDataMap> {
    /**
     * Web worker wrapper used to run the transformers
     * @internal
     */
    private worker;
    /**
     * Usable connector for media-processor lib
     * @internal
     */
    private connector;
    /**
     * Private constructor
     * Use {@link create} to instantiate the class
     * @internal
     */
    private constructor();
    /**
     * Initialize the processor worker an events
     * @param config Configuration to initialize with
     * @internal
     */
    private init;
    /**
     * change the background option during run time using this function.
     * while using this function the media-processor will not be destroyed.
     * while using this function the library promise a full resource cleanup.
     * @param backgroundOptions - see `BackgroundOptions` definition
     */
    setBackgroundOptions(options: BackgroundOptions): Promise<void>;
    /**
     * Sets the expected rate of the track per second.
     * The media processor will use this number for calculating drops in the rate.
     * This could happen when the transformation will take more time than expected.
     * This will not cause an error, just warning to the client.
     * Mostly:
     * Video: 30 frames per second
     * Audio: 50 audio data per second for OPUS
     * @param rate - number holds the predicted track rate. -1 for disable this monitor.
     */
    setTrackExpectedRate(rate: number): void;
    /**
     * Getter for MediaProcessorConnectorInterface connector attribute.
     * @returns - `MediaProcessorConnectorInterface` feed this return value to any vonage SDK that supports this API
     */
    getConnector(): MediaProcessorConnector;
    /**
     * Asynchronous constructor of VonageMediaProcessor
     * @param config Initial MediaProcessorConfig to use
     * @returns Promise resolved with an initialized MediaProcessorConfig
     */
    static create(config: MediaProcessorConfig): Promise<VonageMediaProcessor>;
}
